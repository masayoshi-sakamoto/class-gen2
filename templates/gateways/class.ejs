import { <%= appName %>GatewayBase } from './base'
import { to<%= name %>Props, to<%= name %>Seed } from './translator/<%= name.toLowerCase() %>'
import { optionsToQuery, toQueryProps } from './translator/query'
import { toOptionsProps } from './translator/options'
import { Get<%= name %>, Fetch<%= name %>s, Post<%= name %>, Put<%= name %>, Delete<%= name %> } from '@/infrastructure/network/<%= appName %>/requests/<%= name.toLowerCase() %>'
import <%= name %>Entity, { I<%= name %>Props, Empty<%= name %>PropsFactory } from '@/entities/<%= name %>'
import { IOptionsProps } from '@/entities/Options'

export default class <%= name %> extends <%= appName %>GatewayBase {
  async Get<%= name %>(id: string): Promise<I<%= name %>Props> {
    const { <%= name.toLowerCase() %> } = await this.apiClient.request(new Get<%= name %>(id))
    return <%= name.toLowerCase() %> ? to<%= name %>Props(<%= name.toLowerCase() %>) : Empty<%= name %>PropsFactory()
  }

  async Fetch<%= name %>s(options?: IOptionsProps) {
    const response = await this.apiClient.request(new Fetch<%= name %>s(optionsToQuery(options)))
    return {
      items: response.<%= name.toLowerCase() %>s.map((prop) => to<%= name %>Props(prop)),
      query: toQueryProps(response.query),
      options: toOptionsProps(response.query)
    }
  }

  async Save<%= name %>(entity: <%= name %>Entity) {
    const data = entity.id ? new Put<%= name %>(to<%= name %>Seed(entity.props)) : new Post<%= name %>(to<%= name %>Seed(entity.props))
    await this.apiClient.request(data)
  }

  async Delete<%= name %>(entity: <%= name %>Entity) {
    if (entity.id) {
      await this.apiClient.request(new Delete<%= name %>(entity.id))
    }
  }
}
