import { NuxtCookies } from 'cookie-universal-nuxt'
import { Store } from 'vuex'
import { RootState } from '@/store'
import * as types from '@/store/<%= class_name %>/types'
import <%= ClassName %>Entity, { I<%= ClassName %>Props } from '@/entities/<%= ClassName %>'
import { IResponseProps } from '@/entities/Response'

export default class <%= ClassName %>Repository {
  private cookies: NuxtCookies
  private store: Store<RootState>

  constructor(cookies: NuxtCookies, store: Store<RootState>) {
    this.cookies = cookies
    this.store = store
  }

  set data(value: IResponseProps<I<%= ClassName %>Props>) {
    this.store.commit(new types.Store(value))
  }

  get data(): IResponseProps<I<%= ClassName %>Props> {
    return this.store.state.<%= class_name %>.response
  }

  set current(value: I<%= ClassName %>Props | null) {
    this.store.commit(new types.Current(value))
  }

  get current(): I<%= ClassName %>Props | null {
    return this.store.state.<%= class_name %>.current
  }

  get entity(): <%= ClassName %>Entity {
    return new <%= ClassName %>Entity(this.store.state.<%= class_name %>.current)
  }

  set filter(value: string) {
    this.store.commit(new types.Filter(value))
  }

  get filter(): string {
    return this.store.state.<%= class_name %>.filter
  }
}
