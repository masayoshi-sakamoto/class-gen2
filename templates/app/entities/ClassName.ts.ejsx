<%_ const model = models.find((prop) => prop.ClassName === ClassName) _%>
<%_ if (model) { _%>
import { <%= model.refs.join(', ') %> } from '@/infrastructure/network/<%= AppName %>/schema/models'
<%_ } _%>
  
export interface I<%= ClassName %>Props {
<%_ if (model) { _%>
  <%_ for (const [key, schema] of Object.entries(model.schema)) { _%>
    <%_ const property = schema.required && key !== 'id' ? lowerCamel(key) : lowerCamel(key) + '?' _%>
  <%= property %>: <%= schema.type.join(' | ') %>
  <%_ } _%>
<%_ } _%>
}

export default class <%= ClassName %>Entity {
  private _props: I<%= ClassName %>Props

  constructor(props?: I<%= ClassName %>Props | null) {
    this._props = Empty<%= ClassName %>PropsFactory(props)
  }

  get props(): I<%= ClassName %>Props {
    return this._props
  }

  get clone(): I<%= ClassName %>Props {
    return JSON.parse(JSON.stringify(this._props))
  }
<%_ if (model) { _%>
  <%_ for (const [key, schema] of Object.entries(model.schema)) { _%>
    
  get <%= lowerCamel(key) %>(): <%= schema.type.join(' | ') %><%= !schema.required || key === 'id' ? ' | undefined' : schema.ref ? ' | undefined' : ''%> {
    return this._props.<%= lowerCamel(key) %>
  }
  <%_ } _%>
<%_ } _%>
}

export const headers = [
  { text: 'ID', value: 'id' },
<%_ if (model) { _%>
  <%_ for (const [key, schema] of Object.entries(model.schema)) { _%>
    <%_ if (schema.title) { _%>
  { text: '<%= schema.title %>', value: '<%= lowerCamel(key) %>' },
    <%_ } _%>
  <%_ } _%>
<%_ } _%>
]

export const Empty<%= ClassName %>PropsFactory = (props?: Partial<I<%= ClassName %>Props> | null): I<%= ClassName %>Props => ({
<%_ if (model) { _%>
  <%_ for (const [key, schema] of Object.entries(model.schema)) { _%>
    <%_ if (schema.required && key !== 'id') { _%>
    <%_ const nullable = schema.type.find((prop) => prop === 'null')  _%>
    <%_ const stringable = schema.type.find((prop) => prop === 'string')  _%>
    <%_ const numberable = schema.type.find((prop) => prop === 'number')  _%>
  <%= lowerCamel(key) %>: <%_ if (nullable) { _%>null<%_ } else if (stringable === 'string') { _%>''<%_ } else if (numberable === 'number') { _%>0<%_ } else { _%>[]<%_ } _%>,
    <%_ } _%>
  <%_ } _%>
<%_ } _%>
  ...props
})
