/* eslint camelcase: 0 */
<%_
console.log(models)
const model = models.find((prop) => prop.ClassName === ClassName)
const seeds = models.filter((prop) => prop.ClassName.endsWith(ClassName + 'Request'))
const sames = model.refs.filter((prop) => prop.startsWith(ClassName))
const refs2 = sames.map((prop) => prop.slice(ClassName.length)).filter((prop) => models.find((model) => model.ClassName === prop))
const refs = model.refs.filter((prop) => !prop.startsWith(ClassName))

const schemas = []
if (model) {
  schemas.push(ClassName)
}
if (seeds) {
  for (const v of seeds) {
    schemas.push(v.ClassName)
  }
}
_%>
<%_ if (model) { _%>
    <%_ for (const ref of refs) { _%>
import { to<%= upperCamel(ref) %>Props } from './<%= snake(ref) %>'
    <%_ } _%>
  <%_ } _%>
<%_ if (schemas.length > 0) { _%>
import { <%= schemas.join(', ') %> } from '@/infrastructure/network/<%= AppName %>/schema/models'
<%_ } _%>
<%_ if (model && seeds) { _%>
import { I<%= ClassName %>Props, Empty<%= ClassName %>PropsFactory } from '@/entities/<%= ClassName %>'
<%_ } else if (model) { _%>
import { I<%= ClassName %>Props, Empty<%= ClassName %>PropsFactory } from '@/entities/<%= ClassName %>'
<%_ } else if (seeds) { _%>
import { I<%= ClassName %>Props } from '@/entities/<%= ClassName %>'
<%_ } _%>
<%_ if (model?.schema) { _%>

export const to<%= ClassName %>Props = (props: <%= ClassName %> | null | undefined): I<%= ClassName %>Props => {
  if (!props) {
    return Empty<%= ClassName %>PropsFactory()
  }

  const { <%= Object.keys(model.schema).join(', ') %> } = props
  
  return Empty<%= ClassName %>PropsFactory({
    <%- Object.entries(model.schema).map(([key, prop]) => {
      const camel = lowerCamel(key)
      const model = upperCamel(key)
      let src = key
      if (prop.array && prop.ref && !prop.ref.startsWith(ClassName)) {
        src = `${key} ? ${key}.map((prop) => to${prop.ref}Props(prop)) : []`
      } else if (prop.ref && !prop.ref.startsWith(ClassName)) {
        if (models.find((model) => model.ClassName === prop.ref.slice(ClassName.length))) {
          const model = prop.ref.slice(ClassName.length)
          src = `to${model}Props(${key} as ${model})`
        } else if (models.find((model) => model.ClassName === prop.ref) && !isCamelCase(prop.ref)) {
          src = `to${prop.ref}Props(${key})`
        }
      }
      return camel === src ? camel : camel + ': ' + src
    }).join(',\n    ') %>
  })
}
<%_ } _%>
<%_ if (seeds) { _%>
<%_ for (const seed of seeds) {  _%>

export const to<%= seed.ClassName %> = (props: I<%= ClassName %>Props): <%= seed.ClassName %> => {
  const { <%= Object.keys(seed.schema).map((key) => lowerCamel(key)).join(', ') %> } = props
  return {
    <%= Object.entries(seed.schema).map(([key, prop]) => {
      let camel = lowerCamel(key)
      const src = key
      return camel === src ? src + ': ' + src + '!'  : src + ': ' + camel + '!'
    }).join(',\n    ') %>
  }
}
<%_ } _%>
<%_ } _%>
