<%_ const key = Object.keys(paths).find((key) => key === Tag) _%>
<%_ const path = key ? paths[key] : undefined _%>
<%_ if (path) { _%>
/* eslint camelcase: 0 */
import { <%= AppName %>GatewayBase } from './base'
<%_ const refs = Object.values(path).flatMap((props) => { _%>
  <%_ const response = Object.values(Object.values(props.responses)[0].content)[0].schema.$ref?.split('/').pop() || '' _%>
  <%_ const responseModel = models.find((prop) => prop.ClassName === response) _%>
  <%_ const ref = responseModel ? Object.values(responseModel.schema)[0].ref : '' _%>
  <%_ const request = props.requestBody && Object.values(props.requestBody.content)[0].schema.$ref ? Object.values(props.requestBody.content)[0].schema.$ref.split('/').pop() : '' _%>
  <%_ return ref ? {ref, value: (props.requestBody ? `to${request}` : `to${ref}Props`)} : [] _%>
<%_ }).filter((item, index, self) => index === self.findIndex((t) => t.ref === item.ref && t.value === item.value)) _%>
<%_ for (const r of refs) { _%>
import { <%= r.value %> } from './translator/<%= lowerCamel(r.ref) %>'
<%_  } _%>
<%_ Object.values(path).forEach((props) => { _%>
  <%_ const operationId = upperCamel(props.operationId) _%>
  <%_ const id = operationId.replace(Tag, '') _%>
  <%_ if ( id === 'Fetch') { _%>
<%_ Object.values(path).forEach((props) => { _%>
  <%_ const operationId = upperCamel(props.operationId) _%>
  <%_ const id = operationId.replace(Tag, '') _%>
  <%_ if ( id === 'Order') { _%>
  import { toOrderRequest } from './translator/order'
  import { OrderOrdersRequest } from '@/infrastructure/network/Monitaro/schema/models'
  <%_ } _%>
  import { EmptyResponsePropsFactory } from '@/entities/Response'
<%_ }) _%>
import { toQuery, toQueryProps } from './translator/query'
import { IQueryProps } from '@/entities/Query'
  <%_ } _%>
<%_ }) _%>
import { <%= Object.values(path).map((prop) => upperCamel(prop.operationId)).join(', ') %> } from '@/infrastructure/network/<%= AppName %>/requests/<%= tag %>'
import { I<%= Tag %>Props } from '@/entities/<%= Tag %>'



export default class <%= Tag %> extends <%= AppName %>GatewayBase {
<%_ Object.values(path).forEach((props) => { _%>
  <%_ const operationId = upperCamel(props.operationId) _%>
  <%_ const id = operationId.replace(Tag, '') _%>
  <%_ const response = Object.values(Object.values(props.responses)[0].content)[0].schema.$ref?.split('/').pop() || '' _%>
  <%_ const responseModel = models.find((prop) => prop.ClassName === response) _%>
  <%_ const param = responseModel ? Object.keys(responseModel.schema)[0] : ''  _%>
  <%_ const ref = responseModel ? Object.values(responseModel.schema)[0].ref : '' _%>
  <%_ const name = props.parameters && props.parameters[0].in === 'path' ? props.parameters[0].name : undefined _%>
  <%_ const prop = name === param ? 'id' : name _%>

  <%_ if ( id === 'Fetch') { _%>
  async <%= operationId %>(query?: IQueryProps) {
    const response = await this.apiClient.request(new <%= operationId %>(toQuery(query)))
    return EmptyResponsePropsFactory({
      items: response.<%= param %>.map((prop) => to<%= Tag %>Props(prop)),
      query: toQueryProps(response.query),
    })
  }
  <%_ } else if ( id === 'Order') { _%>
  async <%= operationId %>(<%= name ? prop + ': ' + props.parameters[0].schema.type + ', ' : '' %>params: I<%= Tag %>Props[]) {
    const orders: OrderOrdersRequest[] = params.map((prop) => toOrderRequest(prop))
    const { <%= param %> } = await this.apiClient.request(new <%= operationId %>({ orders }))
    return <%= param %>.map((prop) => to<%= Tag %>Props(prop))
  }
  <%_ } else if (props.requestBody) { _%>
    <%_ const request = props.requestBody && Object.values(props.requestBody.content)[0].schema.$ref ? Object.values(props.requestBody.content)[0].schema.$ref.split('/').pop() : '' _%>
  async <%= operationId %>(<%= name ? prop + ': ' + props.parameters[0].schema.type + ', ' : '' %>params: I<%= Tag %>Props) {
    const { <%= param %> } = await this.apiClient.request(new <%= operationId %>(<%= name ? prop + ', ' : '' %>to<%= Tag %>Request(params)))
    <%_ if (ref) { _%>
    return to<%= ref %>Props(<%= param %>)
    <%_ } else {  _%>
    return <%= param %>
    <%_ }  _%>
  }
  <%_ } else  { _%>
  async <%= operationId %>(<%= name ? prop + ': ' + props.parameters[0].schema.type : '' %>) {
    const { <%= param %> } = await this.apiClient.request(new <%= operationId %>(<%= prop %>))
    <%_ if (ref) { _%>
    return to<%= ref %>Props(<%= param %>)
    <%_ } else {  _%>
    return <%= param %>
    <%_ }  _%>
  }
  <%_ } _%>
<%_ }) _%>
}
<%_ } _%>